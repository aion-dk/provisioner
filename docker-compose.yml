version: "3"
services:
  ui:
    image: "provisioner-ui:latest"
    # image: "534003348933.dkr.ecr.eu-west-1.amazonaws.com/provisioner-ui:main"
    command: "npm run dev"
    build: "./admin-ui"
    depends_on:
      - "api"
    links:
      - "api:provisioner-api"
    volumes:
      - "./admin-ui:/usr/src/app"
      - "/usr/src/app/node_modules"
    ports:
      - "3021:3021"
    environment:
      NEXT_PUBLIC_API_URL_BASE: "http://provisioner-api:3009"

  api:
    image: "provisioner-api:latest"
    # image: "534003348933.dkr.ecr.eu-west-1.amazonaws.com/provisioner-api:main"
    build: "."
    working_dir: "$PWD"
    ports:
      - "3009:3009"
    depends_on:
      - "provisioner-db"
      - "bucket"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "$PWD:$PWD"
    environment:
      AWS_SAM_LOCAL: "true"
      AWS_DEFAULT_REGION: "eu-west-1"
      SAM_CLI_CONTAINER_CONNECTION_TIMEOUT: 20
      # The below is not really working atm but it serves as documentation.
      # Change ./template.yaml for the real one.
      DB_HOST: "http://provisioner-db:8000"
    extra_hosts:
      - "host.docker.internal:host-gateway"

  provisioner-db:
    image: "amazon/dynamodb-local"
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath ./data"
    working_dir: "/home/dynamodblocal"
    volumes:
      - "./data:/home/dynamodblocal/data"
    ports:
      - "8000:8000"

  bucket:
    image: "halverneus/static-file-server:latest"
    volumes:
      - "./bucket:/usr/src/bucket"
    ports:
      - "8081:8080"
    environment:
      FOLDER: "/usr/src/bucket"
      CORS: "true"
      DEBUG: "true"
      HOST: ""
